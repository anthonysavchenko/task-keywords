<?php

/** –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —Å—Ç—Ä–æ–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ */
const LINES_SEPARATOR_REGEX = "/\r\n|\n|\r/";

/** –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–≤—ã—Ä–∞–∂–µ–Ω–∏–π) –≤ —Å—Ç—Ä–æ–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ */
const LINE_ELEMENTS_SEPARATOR = ",";

?>


<html>
<head>
    <title>–ê–Ω—Ç–æ–Ω –°–∞–≤—á–µ–Ω–∫–æ ‚Äî –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</title>
    <style>
        body {
            width: 600px;
            margin: 0 auto;
        }
        h1, h2 {
            text-align: center;
        }
        form {
            display: flex;
            flex-direction: column;
        }
        input[type=submit] {
            width: 150px;
            margin: 20px auto 0;
        }
    </style>
</head>
<body>
    <h1>üóùÔ∏è –ê–Ω—Ç–æ–Ω –°–∞–≤—á–µ–Ω–∫–æ ‚Äî –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</h1>
    <?php
        $source = $_POST['source'] ?? null;
        if ($source) { 
            ?>
            <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç</h2>
            <ol>
                <?php
                    foreach(getPhrases($source) as $phrase) {
                        ?>
                        <li><?= $phrase ?></li>
                        <?php
                    };
                ?>
            </ol>
            <?php
        }
    ?>
    <h2>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç</h2>
    <form method="POST">
        <textarea name="source" rows="10"></textarea>
        <input type="submit" value="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å">
    </form>
</body>
</html>


<?php

/**
 * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 * 
 * @param $source —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑.
 * @return array 
 */
function getPhrases(string $source): array
{
    $keywords = explodeToKeywords($source);
    $phrases = combineKeywordsToPhrases($keywords);
    $phrases = shiftMinusWords($phrases);

    return $phrases;
}

/**
 * –†–∞–∑–±–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö.
 * 
 * @param string $text –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @return array –ù–∞–ø—Ä–∏–º–µ—Ä:
 * ```
 * [
 *      ["Honda", "Honda CRF", "Honda CRF-450X"],
 *      ["–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π -–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"]
 * ]
 * ```
 */
function explodeToKeywords(string $text): array
{
    $lines = preg_split("/\r\n|\n|\r/", $text);

    $keywords = [];
    foreach($lines as $line) {
        $keywords[] = explode(LINE_ELEMENTS_SEPARATOR, $line);
    }

    return $keywords;
}

/**
 * –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç —Ñ—Ä–∞–∑—ã –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 * 
 * @param array $keywords –ù–∞–±–æ—Ä —Å—Ç—Ä–æ–∫ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏. @see explodeToKeywords
 * @return array –ù–∞–ø—Ä–∏–º–µ—Ä:
 * ```
 * [
 *      "Honda –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
 *      "Honda –ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π -–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
 *      "Honda CRF –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
 *      "Honda CRF –ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π -–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
 *      "Honda CRF-450X –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
 *      "Honda CRF-450X –ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π -–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"
 * ]
 * ```
 */
function combineKeywordsToPhrases(array $keywords): array
{
    $phrases = [];
    foreach($keywords as $line) {
        $phrases = combinePhrasesWithLine($phrases, $line);
    }
    $words = [];
    foreach($phrases as $phrase) {
        $words[] = implode(" ", $phrase);
    }
    return $words;
}

/**
 * –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç —Ñ—Ä–∞–∑—ã —Å –æ–¥–Ω–∏–º –Ω–∞–±–æ—Ä–æ–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–æ—á–µ—Ä–µ–¥–Ω—ã–º)
 * 
 * @param array $phrases –ù–∞–±–æ—Ä —É–∂–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑. @see combineKeywordsToPhrases. –ò–ª–∏ null,
 * –µ—Å–ª–∏ —Ñ—Ä–∞–∑ –µ—â–µ –Ω–µ –±—ã–ª–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
 * @param array $line –ù–∞–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 * @return array –ù–∞–ø—Ä–∏–º–µ—Ä:
 * ```
 * [
 *      ["Honda", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"],
 *      ["Honda CRF", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"],
 *      ["Honda CRF-450X", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"]
 * ]
 * ```
 */
function combinePhrasesWithLine(?array $phrases, array $line): array
{
    $combination = [];
    if (count($phrases) === 0) {
        foreach($line as $keyword) {
            $combination[] = [$keyword];
        }
    } else {
        foreach($phrases as $phrase) {
            foreach($line as $keyword) {
                $combination[] = [...$phrase, $keyword];
            }
        }
    }
    return $combination;
}

/**
 * –°–¥–≤–∏–≥–∞–µ—Ç –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞ –≤ –∫–æ–Ω–µ—Ü —Ñ—Ä–∞–∑
 * 
 * @param $phrases –§—Ä–∞–∑—ã. @see combineKeywordsToPhrases
 * @return array
 */
function shiftMinusWords(array $phrases): array
{
    $shifted = [];
    foreach($phrases as $phrase) {
        $noMinusWordsPart = [];
        $minusWordsPart = [];
        foreach(explode(" ", $phrase) as $keyword) {
            if (substr($keyword, 0, 1) === '-') {
                $minusWordsPart[] = $keyword;
            } else {
                $noMinusWordsPart[] = $keyword;
            }
        }
        $shifted[] = implode(" ", [...$noMinusWordsPart, ...$minusWordsPart]);
    }
    return $shifted;
}

?>
