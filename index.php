<?php

/** –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —Å—Ç—Ä–æ–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ */
const LINES_SEPARATOR_REGEX = "/\r\n|\n|\r/";

/** –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ */
const LINE_ELEMENTS_SEPARATOR = ",";

/** –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–ª—é—á–µ–≤–æ–º —Å–ª–æ–≤–µ */
const FORBIDDEN_CHARS = "/[^[:alnum:][:space:]]/u";

/** –°–∏–º–≤–æ–ª-–æ–ø–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–≤–∏—Ç—Å—è –ø–µ—Ä–µ–¥ –º–∏–Ω—É—Å-—Å–ª–æ–≤–æ–º */
const MINUS_WORD_OPERATOR = "-";

/** –°–∏–º–≤–æ–ª—ã-–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞  */
const ALLOWED_OPERATOR_CHARS = MINUS_WORD_OPERATOR . "+!";

/** –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–±–µ–ª–∞ */
const SPACES_SEQUENCE = "/[[:space:]]+/u";

?>


<html>
<head>
    <title>–ê–Ω—Ç–æ–Ω –°–∞–≤—á–µ–Ω–∫–æ ‚Äî –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</title>
    <style>
        body {
            width: 600px;
            margin: 0 auto;
        }
        h1, h2 {
            text-align: center;
        }
        a {
            text-decoration: none;
        }
        form {
            display: flex;
            flex-direction: column;
        }
        nav {
            display: flex;
            justify-content: space-around;
            margin-top: 20px;
        }
        input[type=submit], button {
            width: 175px;
            height: 50px;
            padding: 5px 15px;
        }
    </style>
</head>
<body>
    <h1><a href="index.php">üóùÔ∏è</a> –ê–Ω—Ç–æ–Ω –°–∞–≤—á–µ–Ω–∫–æ ‚Äî –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</h1>
    <h2>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç</h2>
    <form method="POST">
        <textarea id="source" name="source" rows="10"><?= $_POST['source'] ?? "" ?></textarea>
        <nav>
            <button
                onclick="event.preventDefault(); document.getElementById('source').value =
                    'Honda, Honda CRF, Honda CRF-450X\n–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π -–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫\n–ø—Ä–æ–¥–∞–∂–∞, –ø–æ–∫—É–ø–∫–∞, —Ü–µ–Ω–∞, —Å –ø—Ä–æ–±–µ–≥–æ–º';"
            >
                –í—Å—Ç–∞–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä–∞
            </button>
            <button onclick="event.preventDefault(); document.getElementById('source').value = '';">
                –û—á–∏—Å—Ç–∏—Ç—å
            </button>
            <input type="submit" value="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å">
        </nav>
    </form>
    <?php
        $source = $_POST['source'] ?? null;
        if ($source) { 
            ?>
            <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç</h2>
            <ol>
                <?php
                    foreach (getPhrases($source) as $phrase) {
                        ?>
                        <li><?= $phrase ?></li>
                        <?php
                    };
                ?>
            </ol>
            <?php
        }
    ?>
</body>
</html>


<?php

/**
 * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 * 
 * @param $source —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑.
 * @return array 
 */
function getPhrases(string $source): array
{
    /* –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è */
    $keywords = explodeToKeywords($source);
    $phrases = combineKeywordsToPhrases($keywords);

    /* –í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ */
    /* –í –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∫—Ä–æ–º–µ: !,+,- –æ–¥–∏–Ω –∑–Ω–∞–∫ –≤ –Ω–∞—á–∞–ª–µ —Å–ª–æ–≤–∞.
    –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ–±–µ–ª–∞–º–∏ */
    $phrases = removeForbiddenChars($phrases);

    /* –°–ª–æ–≤–∞ —Å –º–∏–Ω—É—Å–∞–º–∏ (–º–∏–Ω—É—Å-—Å–ª–æ–≤–∞) –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Ü–µ —Ñ—Ä–∞–∑—ã */
    $phrases = shiftMinusWords($phrases);

    /* –ù–∞–±–æ—Ä—ã —Å–ª–æ–≤ –∏ –º–∏–Ω—É—Å-—Å–ª–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã –∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è. –≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–≤—Å–µ–º –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ.
    –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –Ω–µ–≥–æ –Ω–µ —è–≤–Ω–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤ –¥–≤—É—Ö —Ñ—Ä–∞–∑–∞—Ö —Å–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞–±–æ—Ä—ã —Å–ª–æ–≤, –Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –Ω–∞–±–æ—Ä—ã
    –º–∏–Ω—É—Å-—Å–ª–æ–≤. –ü–æ—ç—Ç–æ–º—É –∏—Å—Ö–æ–¥—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ø–Ω–¥–µ–∫—Å –ø–æ–∏—Å–∫–∞ –∏ —Ç–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, —á—Ç–æ —Ñ—Ä–∞–∑—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –∫–æ–Ω–∫—É—Ä–∏—Ä–æ–≤–∞—Ç—å,
    –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ –∏ –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞ –≤–æ —Ñ—Ä–∞–∑–µ, –∞ —Ç–∞–∫–∂–µ –æ—Ç–±—Ä–∞—Å—ã–≤–∞—Ç—å —Ñ—Ä–∞–∑—ã —Å
    —Ç–∞–∫–∏–º –Ω–∞–±–æ—Ä–æ–º —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–±–æ—Ä–æ–º —Å–ª–æ–≤ –≤ –¥—Ä—É–≥–æ–π —Ñ—Ä–∞–∑–µ (–ø—Ä–∏ —ç—Ç–æ–º –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞ –Ω–∏–∫–∞–∫ –Ω–µ
    —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è). –¢–∞–∫–∂–µ –µ—Å–ª–∏ –≤–æ —Ñ—Ä–∞–∑–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –∏ –º–∏–Ω—É—Å-—Å–ª–æ–≤, —Ç–æ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–µ */
    /* –ü–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –Ω–µ –≤–∞–∂–µ–Ω (–≤ —Ä–∞–º–∫–∞—Ö —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è) */
    $phrases = removeDuplicates($phrases);

    return $phrases;
}

/**
 * –†–∞–∑–±–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö.
 * 
 * @param string $text –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @return array –ù–∞–ø—Ä–∏–º–µ—Ä:
 * ```
 * [
 *      ["Honda", "Honda CRF", "Honda CRF-450X"],
 *      ["–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π -–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"]
 * ]
 * ```
 */
function explodeToKeywords(string $text): array
{
    $lines = preg_split("/\r\n|\n|\r/", $text);

    $keywords = [];
    foreach ($lines as $line) {
        $keywords[] = explode(LINE_ELEMENTS_SEPARATOR, $line);
    }

    return $keywords;
}

/**
 * –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç —Ñ—Ä–∞–∑—ã –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 * 
 * @param array $keywords –ù–∞–±–æ—Ä —Å—Ç—Ä–æ–∫ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏. @see explodeToKeywords
 * @return array –ù–∞–ø—Ä–∏–º–µ—Ä:
 * ```
 * [
 *      "Honda –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
 *      "Honda –ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π -–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
 *      "Honda CRF –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
 *      "Honda CRF –ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π -–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
 *      "Honda CRF-450X –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
 *      "Honda CRF-450X –ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π -–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"
 * ]
 * ```
 */
function combineKeywordsToPhrases(array $keywords): array
{
    $phrases = [];
    foreach ($keywords as $line) {
        $phrases = combinePhrasesWithLine($phrases, $line);
    }
    $words = [];
    foreach ($phrases as $phrase) {
        $words[] = implode(" ", $phrase);
    }
    return $words;
}

/**
 * –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç —Ñ—Ä–∞–∑—ã —Å –æ–¥–Ω–∏–º –Ω–∞–±–æ—Ä–æ–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–æ—á–µ—Ä–µ–¥–Ω—ã–º)
 * 
 * @param array $phrases –ù–∞–±–æ—Ä —É–∂–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑. @see combineKeywordsToPhrases. –ò–ª–∏ null,
 * –µ—Å–ª–∏ —Ñ—Ä–∞–∑ –µ—â–µ –Ω–µ –±—ã–ª–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
 * @param array $line –ù–∞–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 * @return array –ù–∞–ø—Ä–∏–º–µ—Ä:
 * ```
 * [
 *      ["Honda", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"],
 *      ["Honda CRF", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"],
 *      ["Honda CRF-450X", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"]
 * ]
 * ```
 */
function combinePhrasesWithLine(?array $phrases, array $line): array
{
    $combination = [];
    if (count($phrases) === 0) {
        foreach ($line as $keyword) {
            $combination[] = [trim($keyword)];
        }
    } else {
        foreach ($phrases as $phrase) {
            foreach ($line as $keyword) {
                $combination[] = [...$phrase, trim($keyword)];
            }
        }
    }
    return $combination;
}

/**
 * –£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–µ–µ —Å–∏–º–≤–æ–ª—ã
 * 
 * @param $phrases array –§—Ä–∞–∑—ã. @see combineKeywordsToPhrases
 * @return array –§—Ä–∞–∑—ã
 */
function removeForbiddenChars(array $phrases): array
{
    $phrasesAfterRemove = [];
    foreach ($phrases as $phrase) {
        $phraseAfterRemove = "";
        $keywords = explode(" ", removeExtraSpaces($phrase));
        foreach ($keywords as $keyword) {

            /* –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, -, —Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞ */
            $first_char = substr($keyword, 0, 1);
            $operator = "";
            if (strpos(ALLOWED_OPERATOR_CHARS, $first_char) > -1) {
                $operator = $first_char;
                $keyword = substr($keyword, 1);
            }

            /* –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã */
            $keyword = preg_replace(FORBIDDEN_CHARS, " ", $keyword);
            $keyword = removeExtraSpaces($keyword);

            /* –ï—Å–ª–∏ –≤ –∏—Ç–æ–≥–µ –æ—Ç —Å–ª–æ–≤–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É */
            $keywordLength = strlen($keyword);
            if ($keywordLength === 0) { 
                continue;
            }

            /* –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –≤–æ —Ñ—Ä–∞–∑—É */
            $phraseAfterRemove =
                $phraseAfterRemove .
                (strlen($phraseAfterRemove) > 0 ? " " : "") .
                $operator .
                $keyword;
        }
        if (strlen($phraseAfterRemove) > 0) {
            $phrasesAfterRemove[] = $phraseAfterRemove;
        }
    }
    return $phrasesAfterRemove;
}

/**
 * –ó–∞–º–µ–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
 * 
 * @param string $target –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 * @param string –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
 */
function removeExtraSpaces(string $target): string
{
    $result = preg_replace(SPACES_SEQUENCE, " ", $target);
    return trim($result);
}

/**
 * –°–¥–≤–∏–≥–∞–µ—Ç –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞ –≤ –∫–æ–Ω–µ—Ü —Ñ—Ä–∞–∑
 * 
 * @param $phrases –§—Ä–∞–∑—ã. @see combineKeywordsToPhrases
 * @return array –§—Ä–∞–∑—ã
 */
function shiftMinusWords(array $phrases): array
{
    $shifted = [];
    foreach ($phrases as $phrase) {
        $noMinusWordsPhrase = getNoMinusWordsPhrase(explode(" ", $phrase));
        $minusWordsPhrase = getMinusWordsPhrase(explode(" ", $phrase));
        $shifted[] = implode(" ", [...$noMinusWordsPhrase, ...$minusWordsPhrase]);
    }
    return $shifted;
}

/**
 * –£–¥–∞–ª—è–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞, –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ—Ä–∞–∑—ã —Å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–º–∏—Å—è –Ω–∞–±–æ—Ä–∞–º–∏ —Å–ª–æ–≤ –∏ –º–∏–Ω—É—Å-—Å–ª–æ–≤,
 * –∞ —Ç–∞–∫–∂–µ —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ —Å–ª–æ–≤
 * 
 * @param array $phrases –§—Ä–∞–∑—ã. @see combineKeywordsToPhrases
 * @return array –§—Ä–∞–∑—ã
 */
function removeDuplicates(array $phrases): array
{
    $phrasesAfterRemove = [];
    foreach ($phrases as $phrase) {
        $phraseAfterRemove = [];
        $keywords = explode(" ", $phrase);
        foreach ($keywords as $keyword) {

            /* –û—Ç–±—Ä–∞—Å—ã–≤–µ–º —Ñ—Ä–∞–∑—É, –µ—Å–ª–∏ –≤ –Ω–µ–π –µ—Å—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–ª–æ–≤–æ –∏ –º–∏–Ω—É—Å-—Å–ª–æ–≤–æ */
            if (!isMinusWord($keyword) &&
                array_search(MINUS_WORD_OPERATOR . $keyword, $keywords) !== false) {
                    $phraseAfterRemove = [];
                    break;
            }
            
            /* –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ –∏ –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞ */
            if (array_search($keyword, $phraseAfterRemove) === false) {
                $phraseAfterRemove[] = $keyword;
            }
        }
        if (count($phraseAfterRemove) > 0) {

            /* –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ—Ä–∞–∑—É, –µ—Å–ª–∏ –Ω–∞–±–æ—Ä –µ–µ —Å–ª–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–±–æ—Ä–æ–º —Å–ª–æ–≤ –≤ –æ–¥–Ω–æ–π –∏–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ */
            $noMinusWordsPhrase = getNoMinusWordsPhrase($phraseAfterRemove);
            sort($noMinusWordsPhrase);
            $noMinusWordsPhrase = implode(" ", $noMinusWordsPhrase);
            if (empty($phrasesAfterRemove[$noMinusWordsPhrase])) {
                $phrasesAfterRemove[$noMinusWordsPhrase] = implode(" ", $phraseAfterRemove);
            }
        }
    }
    return array_values($phrasesAfterRemove);
}

/**
 * –û—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ —Ñ—Ä–∞–∑–µ —Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞
 * 
 * @param array $phrase –§—Ä–∞–∑–∞
 * @return array –§—Ä–∞–∑–∞
 */
function getMinusWordsPhrase(array $phrase): array
{
    return array_filter($phrase, "isMinusWord");
}

/**
 * –û—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ —Ñ—Ä–∞–∑–µ —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ (—É–¥–∞–ª—è–µ—Ç –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞)
 * 
 * @param array $phrase –§—Ä–∞–∑–∞
 * @return array –§—Ä–∞–∑–∞
 */
function getNoMinusWordsPhrase(array $phrase): array
{
    return array_filter($phrase, function (string $keyword) {
        return !isMinusWord($keyword);
    });
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –º–∏–Ω—É—Å-—Å–ª–æ–≤–æ–º
 * 
 * @param string $target –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 * @return string –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
 */
function isMinusWord(string $target): bool
{
    return substr($target, 0, 1) === MINUS_WORD_OPERATOR;
}

?>
